{
  "address": "0x00B424EEF7090271304f7A5Fc62e33C3BF0D0249",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retrieved",
          "type": "uint256"
        }
      ],
      "name": "Raffle__InsufficientStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfParticipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac92b491d6c81128403394f172d71aef80a0cb5d3aa3694acd61aecb870fbf82",
  "receipt": {
    "to": null,
    "from": "0x7FCfA189672E7511106B6ff025d55250EEF3f9ef",
    "contractAddress": "0x00B424EEF7090271304f7A5Fc62e33C3BF0D0249",
    "transactionIndex": 4,
    "gasUsed": "1266424",
    "logsBloom": "0x
    "blockHash": "0x2f12d0f412cf7fbc19a1f88bc2d3406782388cc1ef93232f6cbdb60b91e71bb1",
    "transactionHash": "0xac92b491d6c81128403394f172d71aef80a0cb5d3aa3694acd61aecb870fbf82",
    "logs": [],
    "blockNumber": 7446695,
    "cumulativeGasUsed": "1375603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "158",
    "500000",
    "1000000000000000",
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "e8b19c8f261d9e8d314a9195350b95b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retrieved\",\"type\":\"uint256\"}],\"name\":\"Raffle__InsufficientStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This function is needed for ChainLink to work properly `upkeepNeeded` need to be true to succeed, meet the following criteria:    1. Time interval should have passed    2. The lottery should be played with at least 1 player    3. Subscripton is funded with LINK    4. The lottery should be in \\\"open\\\" state\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__InsufficientStake(uint256 required, uint256 retrieved);\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded();\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_participants;\\n    address payable private s_lastWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n\\n    uint32 private constant NUM_WORDS = 1;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    modifier SufficientStake() {\\n        if (msg.value <= i_entranceFee) {\\n            revert Raffle__InsufficientStake({\\n                required: i_entranceFee,\\n                retrieved: msg.value\\n            });\\n        }\\n        _;\\n    }\\n\\n    modifier RuffleStateOpen() {\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        _;\\n    }\\n\\n    event RaffleEnter(address indexed participant);\\n    event RequestRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed participant);\\n\\n    constructor(\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 entranceFee,\\n        address vrfCoordinatorAddress,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) {\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\\n        s_raffleState = RaffleState.OPEN;\\n        i_interval = interval;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev This function is needed for ChainLink to work properly\\n     * `upkeepNeeded` need to be true to succeed, meet the following criteria:\\n     *    1. Time interval should have passed\\n     *    2. The lottery should be played with at least 1 player\\n     *    3. Subscripton is funded with LINK\\n     *    4. The lottery should be in \\\"open\\\" state\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        returns (\\n            bool upKeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool ifTimePassed = ((block.timestamp - s_lastTimeStamp) >= i_interval);\\n        bool ifEnoughParticipants = s_participants.length >= 1;\\n        bool ifEnoughBalance = address(this).balance > 0;\\n        upKeepNeeded = (isOpen &&\\n            ifTimePassed &&\\n            ifEnoughParticipants &&\\n            ifEnoughBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata) external {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded();\\n        }\\n\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestRaffleWinner(requestId);\\n    }\\n\\n    function enterRaffle() public payable SufficientStake RuffleStateOpen {\\n        s_participants.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_participants.length;\\n        s_lastWinner = s_participants[indexOfWinner];\\n\\n        (bool success, ) = s_lastWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        s_raffleState = RaffleState.OPEN;\\n        s_participants = new address payable[](0);\\n\\n        emit WinnerPicked(s_lastWinner);\\n    }\\n\\n    function getEntranceFee() external view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getParticipants()\\n        external\\n        view\\n        returns (address payable[] memory)\\n    {\\n        return s_participants;\\n    }\\n\\n    function getLastWinner() external view returns (address payable) {\\n        return s_lastWinner;\\n    }\\n\\n    function getRaffleState() external view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumberOfParticipants() external view returns (uint256) {\\n        return s_participants.length;\\n    }\\n\\n    function getLatestTimeStamp() external view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() external view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getSubscriptionId() external view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n}\\n\",\"keccak256\":\"0x32fa2b375cbc2fb8f81888f2bfb70e1fa7d17bff240235a6ccddaf26d4c37e23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200193638038062001936833981810160405281019062000038919062000294565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508560c081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508363ffffffff166101008163ffffffff16815250508261012081815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550806101408181525050426002819055505050505050506200035f565b600080fd5b6000819050919050565b620001488162000133565b81146200015457600080fd5b50565b60008151905062000168816200013d565b92915050565b600067ffffffffffffffff82169050919050565b6200018d816200016e565b81146200019957600080fd5b50565b600081519050620001ad8162000182565b92915050565b600063ffffffff82169050919050565b620001ce81620001b3565b8114620001da57600080fd5b50565b600081519050620001ee81620001c3565b92915050565b6000819050919050565b6200020981620001f4565b81146200021557600080fd5b50565b6000815190506200022981620001fe565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200025c826200022f565b9050919050565b6200026e816200024f565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000157565b9650506020620002d789828a016200019c565b9550506040620002ea89828a01620001dd565b9450506060620002fd89828a0162000218565b93505060806200031089828a016200027d565b92505060a06200032389828a0162000218565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611559620003dd600039600081816107dd015261084e0152600081816102a20152818161039f01526103c601526000610644015260008181610621015261088201526000610600015260006105c40152600081816102df015261033301526115596000f3fe6080604052600436106100a75760003560e01c80635aa68ac0116100645780635aa68ac0146101895780636e04ff0d146101b457806391ad27b4146101f2578063c80c28a21461021d578063de3d9fb714610248578063f88649a114610273576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c161029e565b6040516100ce9190610bf9565b60405180910390f35b3480156100e357600080fd5b506100ec6102c6565b6040516100f99190610c8b565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610e3f565b6102dd565b005b61013361039d565b005b34801561014157600080fd5b5061014a610538565b6040516101579190610bf9565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610ef6565b610542565b005b34801561019557600080fd5b5061019e61070c565b6040516101ab9190611033565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061110a565b61079a565b6040516101e99291906111f6565b60405180910390f35b3480156101fe57600080fd5b5061020761084a565b6040516102149190610bf9565b60405180910390f35b34801561022957600080fd5b50610232610872565b60405161023f9190610bf9565b60405180910390f35b34801561025457600080fd5b5061025d61087e565b60405161026a9190611249565b60405180910390f35b34801561027f57600080fd5b506102886108a6565b6040516102959190611273565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038f57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103869291906112af565b60405180910390fd5b61039982826108d0565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003411610423577f0000000000000000000000000000000000000000000000000000000000000000346040517fe42fd3a100000000000000000000000000000000000000000000000000000000815260040161041a9291906112d8565b60405180910390fd5b6000600181111561043757610436610c14565b5b600160149054906101000a900460ff16600181111561045957610458610c14565b5b14610490576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061055c6040518060200160405280600081525061079a565b50905080610596576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060146101000a81548160ff021916908360018111156105bb576105ba610c14565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610685959493929190611356565b602060405180830381600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d791906113be565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561079057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610746575b5050505050905090565b600060606000600160149054906101000a900460ff1660018111156107c2576107c1610c14565b5b600060018111156107d6576107d5610c14565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261080a919061141a565b1015905060006001600080549050101590506000804711905083801561082d5750825b80156108365750815b801561083f5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050826000815181106108eb576108ea61144e565b5b60200260200101516108fd91906114ac565b9050600081815481106109135761091261144e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516109c69061150e565b60006040518083038185875af1925050503d8060008114610a03576040519150601f19603f3d011682016040523d82523d6000602084013e610a08565b606091505b5050905080610a43576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff02191690836001811115610a6957610a68610c14565b5b0217905550600067ffffffffffffffff811115610a8957610a88610cfc565b5b604051908082528060200260200182016040528015610ab75781602001602082028036833780820191505090505b5060009080519060200190610acd929190610b39565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610bb2579160200282015b82811115610bb15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b59565b5b509050610bbf9190610bc3565b5090565b5b80821115610bdc576000816000905550600101610bc4565b5090565b6000819050919050565b610bf381610be0565b82525050565b6000602082019050610c0e6000830184610bea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c5457610c53610c14565b5b50565b6000819050610c6582610c43565b919050565b6000610c7582610c57565b9050919050565b610c8581610c6a565b82525050565b6000602082019050610ca06000830184610c7c565b92915050565b6000604051905090565b600080fd5b600080fd5b610cc381610be0565b8114610cce57600080fd5b50565b600081359050610ce081610cba565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d3482610ceb565b810181811067ffffffffffffffff82111715610d5357610d52610cfc565b5b80604052505050565b6000610d66610ca6565b9050610d728282610d2b565b919050565b600067ffffffffffffffff821115610d9257610d91610cfc565b5b602082029050602081019050919050565b600080fd5b6000610dbb610db684610d77565b610d5c565b90508083825260208201905060208402830185811115610dde57610ddd610da3565b5b835b81811015610e075780610df38882610cd1565b845260208401935050602081019050610de0565b5050509392505050565b600082601f830112610e2657610e25610ce6565b5b8135610e36848260208601610da8565b91505092915050565b60008060408385031215610e5657610e55610cb0565b5b6000610e6485828601610cd1565b925050602083013567ffffffffffffffff811115610e8557610e84610cb5565b5b610e9185828601610e11565b9150509250929050565b600080fd5b60008083601f840112610eb657610eb5610ce6565b5b8235905067ffffffffffffffff811115610ed357610ed2610e9b565b5b602083019150836001820283011115610eef57610eee610da3565b5b9250929050565b60008060208385031215610f0d57610f0c610cb0565b5b600083013567ffffffffffffffff811115610f2b57610f2a610cb5565b5b610f3785828601610ea0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9a82610f6f565b9050919050565b610faa81610f8f565b82525050565b6000610fbc8383610fa1565b60208301905092915050565b6000602082019050919050565b6000610fe082610f43565b610fea8185610f4e565b9350610ff583610f5f565b8060005b8381101561102657815161100d8882610fb0565b975061101883610fc8565b925050600181019050610ff9565b5085935050505092915050565b6000602082019050818103600083015261104d8184610fd5565b905092915050565b600080fd5b600067ffffffffffffffff82111561107557611074610cfc565b5b61107e82610ceb565b9050602081019050919050565b82818337600083830152505050565b60006110ad6110a88461105a565b610d5c565b9050828152602081018484840111156110c9576110c8611055565b5b6110d484828561108b565b509392505050565b600082601f8301126110f1576110f0610ce6565b5b813561110184826020860161109a565b91505092915050565b6000602082840312156111205761111f610cb0565b5b600082013567ffffffffffffffff81111561113e5761113d610cb5565b5b61114a848285016110dc565b91505092915050565b60008115159050919050565b61116881611153565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111a857808201518184015260208101905061118d565b838111156111b7576000848401525b50505050565b60006111c88261116e565b6111d28185611179565b93506111e281856020860161118a565b6111eb81610ceb565b840191505092915050565b600060408201905061120b600083018561115f565b818103602083015261121d81846111bd565b90509392505050565b600067ffffffffffffffff82169050919050565b61124381611226565b82525050565b600060208201905061125e600083018461123a565b92915050565b61126d81610f8f565b82525050565b60006020820190506112886000830184611264565b92915050565b600061129982610f6f565b9050919050565b6112a98161128e565b82525050565b60006040820190506112c460008301856112a0565b6112d160208301846112a0565b9392505050565b60006040820190506112ed6000830185610bea565b6112fa6020830184610bea565b9392505050565b6000819050919050565b61131481611301565b82525050565b600061ffff82169050919050565b6113318161131a565b82525050565b600063ffffffff82169050919050565b61135081611337565b82525050565b600060a08201905061136b600083018861130b565b611378602083018761123a565b6113856040830186611328565b6113926060830185611347565b61139f6080830184611347565b9695505050505050565b6000815190506113b881610cba565b92915050565b6000602082840312156113d4576113d3610cb0565b5b60006113e2848285016113a9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142582610be0565b915061143083610be0565b925082821015611443576114426113eb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114b782610be0565b91506114c283610be0565b9250826114d2576114d161147d565b5b828206905092915050565b600081905092915050565b50565b60006114f86000836114dd565b9150611503826114e8565b600082019050919050565b6000611519826114eb565b915081905091905056fea264697066735822122018fa4f796fa350a960ce61e426d29a42ad749e0aa2778aa9f17571dbbe79b69664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80635aa68ac0116100645780635aa68ac0146101895780636e04ff0d146101b457806391ad27b4146101f2578063c80c28a21461021d578063de3d9fb714610248578063f88649a114610273576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c161029e565b6040516100ce9190610bf9565b60405180910390f35b3480156100e357600080fd5b506100ec6102c6565b6040516100f99190610c8b565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610e3f565b6102dd565b005b61013361039d565b005b34801561014157600080fd5b5061014a610538565b6040516101579190610bf9565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610ef6565b610542565b005b34801561019557600080fd5b5061019e61070c565b6040516101ab9190611033565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061110a565b61079a565b6040516101e99291906111f6565b60405180910390f35b3480156101fe57600080fd5b5061020761084a565b6040516102149190610bf9565b60405180910390f35b34801561022957600080fd5b50610232610872565b60405161023f9190610bf9565b60405180910390f35b34801561025457600080fd5b5061025d61087e565b60405161026a9190611249565b60405180910390f35b34801561027f57600080fd5b506102886108a6565b6040516102959190611273565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038f57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103869291906112af565b60405180910390fd5b61039982826108d0565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003411610423577f0000000000000000000000000000000000000000000000000000000000000000346040517fe42fd3a100000000000000000000000000000000000000000000000000000000815260040161041a9291906112d8565b60405180910390fd5b6000600181111561043757610436610c14565b5b600160149054906101000a900460ff16600181111561045957610458610c14565b5b14610490576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061055c6040518060200160405280600081525061079a565b50905080610596576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060146101000a81548160ff021916908360018111156105bb576105ba610c14565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610685959493929190611356565b602060405180830381600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d791906113be565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561079057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610746575b5050505050905090565b600060606000600160149054906101000a900460ff1660018111156107c2576107c1610c14565b5b600060018111156107d6576107d5610c14565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261080a919061141a565b1015905060006001600080549050101590506000804711905083801561082d5750825b80156108365750815b801561083f5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050826000815181106108eb576108ea61144e565b5b60200260200101516108fd91906114ac565b9050600081815481106109135761091261144e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516109c69061150e565b60006040518083038185875af1925050503d8060008114610a03576040519150601f19603f3d011682016040523d82523d6000602084013e610a08565b606091505b5050905080610a43576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff02191690836001811115610a6957610a68610c14565b5b0217905550600067ffffffffffffffff811115610a8957610a88610cfc565b5b604051908082528060200260200182016040528015610ab75781602001602082028036833780820191505090505b5060009080519060200190610acd929190610b39565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610bb2579160200282015b82811115610bb15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b59565b5b509050610bbf9190610bc3565b5090565b5b80821115610bdc576000816000905550600101610bc4565b5090565b6000819050919050565b610bf381610be0565b82525050565b6000602082019050610c0e6000830184610bea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c5457610c53610c14565b5b50565b6000819050610c6582610c43565b919050565b6000610c7582610c57565b9050919050565b610c8581610c6a565b82525050565b6000602082019050610ca06000830184610c7c565b92915050565b6000604051905090565b600080fd5b600080fd5b610cc381610be0565b8114610cce57600080fd5b50565b600081359050610ce081610cba565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d3482610ceb565b810181811067ffffffffffffffff82111715610d5357610d52610cfc565b5b80604052505050565b6000610d66610ca6565b9050610d728282610d2b565b919050565b600067ffffffffffffffff821115610d9257610d91610cfc565b5b602082029050602081019050919050565b600080fd5b6000610dbb610db684610d77565b610d5c565b90508083825260208201905060208402830185811115610dde57610ddd610da3565b5b835b81811015610e075780610df38882610cd1565b845260208401935050602081019050610de0565b5050509392505050565b600082601f830112610e2657610e25610ce6565b5b8135610e36848260208601610da8565b91505092915050565b60008060408385031215610e5657610e55610cb0565b5b6000610e6485828601610cd1565b925050602083013567ffffffffffffffff811115610e8557610e84610cb5565b5b610e9185828601610e11565b9150509250929050565b600080fd5b60008083601f840112610eb657610eb5610ce6565b5b8235905067ffffffffffffffff811115610ed357610ed2610e9b565b5b602083019150836001820283011115610eef57610eee610da3565b5b9250929050565b60008060208385031215610f0d57610f0c610cb0565b5b600083013567ffffffffffffffff811115610f2b57610f2a610cb5565b5b610f3785828601610ea0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9a82610f6f565b9050919050565b610faa81610f8f565b82525050565b6000610fbc8383610fa1565b60208301905092915050565b6000602082019050919050565b6000610fe082610f43565b610fea8185610f4e565b9350610ff583610f5f565b8060005b8381101561102657815161100d8882610fb0565b975061101883610fc8565b925050600181019050610ff9565b5085935050505092915050565b6000602082019050818103600083015261104d8184610fd5565b905092915050565b600080fd5b600067ffffffffffffffff82111561107557611074610cfc565b5b61107e82610ceb565b9050602081019050919050565b82818337600083830152505050565b60006110ad6110a88461105a565b610d5c565b9050828152602081018484840111156110c9576110c8611055565b5b6110d484828561108b565b509392505050565b600082601f8301126110f1576110f0610ce6565b5b813561110184826020860161109a565b91505092915050565b6000602082840312156111205761111f610cb0565b5b600082013567ffffffffffffffff81111561113e5761113d610cb5565b5b61114a848285016110dc565b91505092915050565b60008115159050919050565b61116881611153565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111a857808201518184015260208101905061118d565b838111156111b7576000848401525b50505050565b60006111c88261116e565b6111d28185611179565b93506111e281856020860161118a565b6111eb81610ceb565b840191505092915050565b600060408201905061120b600083018561115f565b818103602083015261121d81846111bd565b90509392505050565b600067ffffffffffffffff82169050919050565b61124381611226565b82525050565b600060208201905061125e600083018461123a565b92915050565b61126d81610f8f565b82525050565b60006020820190506112886000830184611264565b92915050565b600061129982610f6f565b9050919050565b6112a98161128e565b82525050565b60006040820190506112c460008301856112a0565b6112d160208301846112a0565b9392505050565b60006040820190506112ed6000830185610bea565b6112fa6020830184610bea565b9392505050565b6000819050919050565b61131481611301565b82525050565b600061ffff82169050919050565b6113318161131a565b82525050565b600063ffffffff82169050919050565b61135081611337565b82525050565b600060a08201905061136b600083018861130b565b611378602083018761123a565b6113856040830186611328565b6113926060830185611347565b61139f6080830184611347565b9695505050505050565b6000815190506113b881610cba565b92915050565b6000602082840312156113d4576113d3610cb0565b5b60006113e2848285016113a9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142582610be0565b915061143083610be0565b925082821015611443576114426113eb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114b782610be0565b91506114c283610be0565b9250826114d2576114d161147d565b5b828206905092915050565b600081905092915050565b50565b60006114f86000836114dd565b9150611503826114e8565b600082019050919050565b6000611519826114eb565b915081905091905056fea264697066735822122018fa4f796fa350a960ce61e426d29a42ad749e0aa2778aa9f17571dbbe79b69664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This function is needed for ChainLink to work properly `upkeepNeeded` need to be true to succeed, meet the following criteria:    1. Time interval should have passed    2. The lottery should be played with at least 1 player    3. Subscripton is funded with LINK    4. The lottery should be in \"open\" state"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1168,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_participants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1170,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 1173,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)1154"
      },
      {
        "astId": 1177,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1154": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}